import analysis.normed_space.basic

variables {X : Type*} [normed_group X]

variables {ùïú : Type*} [normed_field ùïú] [normed_space ùïú X] -- [complete_space X]

def is_projection : (X ‚ÜíL[ùïú] X) ‚Üí Prop := Œª P, P^2 = P

lemma projection_def {P: X ‚ÜíL[ùïú] X} (h: is_projection P) : P^2 = P := by exact h

lemma projection_complement (P: X ‚ÜíL[ùïú] X) : is_projection P ‚Üî is_projection (1-P) :=
begin
  split,
  { unfold is_projection,
    intro h,
    rw sq at h,
    rw [sq, mul_sub, mul_one, sub_mul, one_mul, h, sub_self, sub_zero ], },
  { unfold is_projection,
    intro h,
    rw [sq, mul_sub, mul_one, sub_mul, one_mul, sub_eq_self, sub_eq_zero] at h,
    rw [sq, ‚Üê h], }
end

def is_Lprojection : (X ‚ÜíL[ùïú] X) ‚Üí Prop := Œª P, is_projection P ‚àß ‚àÄ (x : X), ‚à•x‚à• = ‚à•P x‚à• + ‚à•(1-P) x‚à•

def is_Mprojection : (X ‚ÜíL[ùïú] X) ‚Üí Prop := Œª P, is_projection P ‚àß ‚àÄ (x : X), ‚à•x‚à• = (max ‚à•P x‚à•  ‚à•(1-P) x‚à•)

lemma Lcomplement (P: X ‚ÜíL[ùïú] X) : is_Lprojection P ‚Üî is_Lprojection (1-P) :=
begin
  split,
  {
    intro h,
    unfold is_Lprojection,
    rw ‚Üê projection_complement,
    rw sub_sub_cancel,
    split,
    { exact h.left, },
    { intros,
      rw add_comm,
      apply h.right,
    }
  },
  { intro h,
    unfold is_Lprojection,
    rw projection_complement,
    split,
    { exact h.left, },
    { intros,
      rw add_comm,
      nth_rewrite_rhs 1 ‚Üê sub_sub_cancel 1 P,
      apply h.right,
    }
   }
end

lemma Lproj_PQ_eq_QPQ (P: X ‚ÜíL[ùïú] X) (Q: X ‚ÜíL[ùïú] X) (h‚ÇÅ: is_Lprojection P) (h‚ÇÇ: is_Lprojection Q) :
  P * Q = Q * P * Q :=
begin
  ext,
  rw ‚Üê norm_sub_eq_zero_iff,
  have e1 : ‚à•Q x‚à• ‚â• ‚à•Q x‚à• + 2 ‚Ä¢ ‚à• (P * Q) x - (Q * P * Q) x‚à• :=
  calc ‚à•Q x‚à• = ‚à•P (Q x)‚à• + ‚à•(1 - P) (Q x)‚à• : by rw h‚ÇÅ.right
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + ‚à•(1 - P) (Q x)‚à• : by rw h‚ÇÇ.right
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q ((1 - P) (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) : by rw h‚ÇÇ.right ((1 - P) (Q x))
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q (Q x - P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) : rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q (Q x) - Q (P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) : by rw map_sub
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•(Q * Q) x - Q (P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) : rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) : by rw [‚Üê sq, projection_def h‚ÇÇ.left]
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) (Q x - P (Q x))‚à•) : rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) (Q x) - (1-Q) (P (Q x))‚à•) : by rw map_sub
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•((1-Q) * Q) x - (1-Q) (P (Q x))‚à•) : rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•0 - (1-Q) (P (Q x))‚à•) : by {rw [sub_mul, ‚Üê sq, projection_def h‚ÇÇ.left, one_mul, sub_self ], exact rfl }
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à•) : by rw [zero_sub, norm_neg]
  ... = ‚à•Q (P (Q x))‚à• + ‚à•Q x - Q (P (Q x))‚à• + 2‚Ä¢‚à•(1-Q) (P (Q x))‚à•  : by abel
  ... ‚â• ‚à•Q x‚à• + 2 ‚Ä¢ ‚à• (P * Q) x - (Q * P * Q) x‚à• : by exact add_le_add_right (norm_le_insert' (Q x) (Q (P (Q x)))) (2‚Ä¢‚à•(1-Q) (P (Q x))‚à•),
  rw ge at e1,
  nth_rewrite_rhs 0 ‚Üê add_zero (‚à•Q x‚à•) at e1,
  rw [add_le_add_iff_left, two_smul,  ‚Üê two_mul]  at e1,
  rw le_antisymm_iff,
  split,
  { rw ‚Üê mul_zero (2:‚Ñù) at e1,
    rw mul_le_mul_left at e1, exact e1, norm_num, },
  { apply norm_nonneg, }
end

lemma Lproj_QP_eq_QPQ (P: X ‚ÜíL[ùïú] X) (Q: X ‚ÜíL[ùïú] X) (h‚ÇÅ: is_Lprojection P) (h‚ÇÇ: is_Lprojection Q) : Q * P = Q * P * Q :=
begin
  have e1: P * (1 - Q) = P * (1 - Q) - (Q * P - Q * P * Q) :=
  calc P * (1 - Q) = (1 - Q) * P * (1 - Q) : by rw Lproj_PQ_eq_QPQ P (1 - Q) h‚ÇÅ ((Lcomplement Q).mp h‚ÇÇ)
  ... = 1 * (P * (1 - Q)) - Q * (P * (1 - Q)) : by {rw mul_assoc, rw sub_mul,}
  ... = P * (1 - Q) - Q * (P * (1 - Q)) : by rw one_mul
  ... = P * (1 - Q) - Q * (P - P * Q) : by rw [mul_sub, mul_one]
  ... = P * (1 - Q) - (Q * P - Q * P * Q) : by rw [mul_sub Q, mul_assoc],
  rw [eq_sub_iff_add_eq, add_right_eq_self, sub_eq_zero] at e1,
  exact e1,
end

lemma Lproj_commute (P: X ‚ÜíL[ùïú] X) (Q: X ‚ÜíL[ùïú] X) [h‚ÇÅ: is_Lprojection P] [h‚ÇÇ : is_Lprojection Q] : commute P Q :=
begin
  unfold commute,
  unfold semiconj_by,
  rw Lproj_PQ_eq_QPQ P Q h‚ÇÅ h‚ÇÇ,
  nth_rewrite_rhs 0 Lproj_QP_eq_QPQ P Q h‚ÇÅ h‚ÇÇ,
end
