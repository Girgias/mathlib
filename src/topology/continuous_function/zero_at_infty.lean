/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import topology.continuous_function.bounded

/-!
# Continuous functions vanishing at infinity

The type of continuous functions vanishing at infinity. When the domain is compact
`C(Œ±, Œ≤) ‚âÉ (Œ± ‚ÜíC‚ÇÄ Œ≤)` via the identity map. When the codomain is a metric space, every continuous
map which vanishes at infinity is a bounded continuous function. When the domain is a locally
compact space, this type has nice properties.
-/
universes u v w

variables {F : Type*} {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w} [topological_space Œ±]

open_locale bounded_continuous_function topological_space
open filter metric

section preliminaries
--- these results need to be moved to appropriate places

@[simp]
lemma filter.cocompact_eq_bot [compact_space Œ±] : cocompact Œ± = ‚ä• :=
has_basis_cocompact.eq_bot_iff.mpr ‚ü®set.univ, compact_univ, set.compl_univ‚ü©

end preliminaries

/-- `Œ± ‚ÜíC‚ÇÄ Œ≤)` is the type of continuous functions `Œ± ‚Üí Œ≤` which vanish at infinity from a
topological space to a metric space with a zero element.

When possible, instead of parametrizing results over `(f : Œ± ‚ÜíC‚ÇÄ Œ≤)`,
you should parametrize over `(F : Type*) [zero_at_infty_continuous_map_class F Œ± Œ≤] (f : F)`.

When you extend this structure, make sure to extend `zero_at_infty_continuous_map_class`. -/
structure zero_at_infty_continuous_map (Œ± : Type u) (Œ≤ : Type v)
  [topological_space Œ±] [has_zero Œ≤] [topological_space Œ≤] extends continuous_map Œ± Œ≤ :
  Type (max u v) :=
(zero_at_infty' : tendsto to_fun (cocompact Œ±) (ùìù 0))

localized "notation  Œ± ` ‚ÜíC‚ÇÄ ` Œ≤ := zero_at_infty_continuous_map Œ± Œ≤" in zero_at_infty

/-- `zero_at_infty_continuous_map_class F Œ± Œ≤` states that `F` is a type of continuous maps which
vanish at infinity.

You should also extend this typeclass when you extend `zero_at_infty_continuous_map`. -/
class zero_at_infty_continuous_map_class (F Œ± Œ≤ : Type*) [topological_space Œ±] [has_zero Œ≤]
  [topological_space Œ≤] extends continuous_map_class F Œ± Œ≤ :=
(zero_at_infty (f : F) : tendsto f (cocompact Œ±) (ùìù 0))

export zero_at_infty_continuous_map_class (zero_at_infty)

namespace zero_at_infty_continuous_map

section basics

variables [topological_space Œ≤] [has_zero Œ≤] [zero_at_infty_continuous_map_class F Œ± Œ≤]

instance : zero_at_infty_continuous_map_class (Œ± ‚ÜíC‚ÇÄ Œ≤) Œ± Œ≤ :=
{ coe := Œª f, f.to_fun,
  coe_injective' := Œª f g h, by { obtain ‚ü®‚ü®_, _‚ü©, _‚ü© := f, obtain ‚ü®‚ü®_, _‚ü©, _‚ü© := g, congr' },
  map_continuous := Œª f, f.continuous_to_fun,
  zero_at_infty := Œª f, f.zero_at_infty' }

/-- Helper instance for when there's too many metavariables to apply `fun_like.has_coe_to_fun`
directly. -/
instance : has_coe_to_fun (Œ± ‚ÜíC‚ÇÄ Œ≤) (Œª _, Œ± ‚Üí Œ≤) := fun_like.has_coe_to_fun

instance : has_coe_t F (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
‚ü®Œª f, { to_fun := f, continuous_to_fun := map_continuous f, zero_at_infty' := zero_at_infty f }‚ü©

@[simp] lemma coe_to_continuous_fun (f : Œ± ‚ÜíC‚ÇÄ Œ≤) : (f.to_continuous_map : Œ± ‚Üí Œ≤) = f := rfl


@[ext] lemma ext {f g : Œ± ‚ÜíC‚ÇÄ Œ≤} (h : ‚àÄ x, f x = g x) : f = g := fun_like.ext _ _ h

/-- Copy of a `zero_at_infinity_continuous_map` with a new `to_fun` equal to the old one. Useful
to fix definitional equalities. -/
protected def copy (f : Œ± ‚ÜíC‚ÇÄ Œ≤) (f' : Œ± ‚Üí Œ≤) (h : f' = f) : Œ± ‚ÜíC‚ÇÄ Œ≤ :=
{ to_fun := f',
  continuous_to_fun := by { rw h, exact f.continuous_to_fun },
  zero_at_infty' := by { simp_rw h, exact f.zero_at_infty' } }

lemma eq_of_empty [is_empty Œ±] (f g : Œ± ‚ÜíC‚ÇÄ Œ≤) : f = g :=
ext $ is_empty.elim ‚Äπ_‚Ä∫

/-
lemma coe_injective : @function.injective (Œ± ‚ÜíC‚ÇÄ Œ≤) (Œ± ‚Üí Œ≤) coe_fn :=
Œª f g h, by cases f; cases g; congr'

@[simp] lemma coe_mk (f : Œ± ‚Üí Œ≤) (h : continuous f) :
  ‚áë(‚ü®f, h‚ü© : C(Œ±, Œ≤)) = f := rfl
-/

/-- A continuous function on a compact space is automatically a continuous function vanishing at
infitnity. -/
@[simps]
def continuous_map.lift [compact_space Œ±] : C(Œ±, Œ≤) ‚âÉ (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ to_fun := Œª f, { to_fun := f, continuous_to_fun := f.continuous, zero_at_infty' := by simp },
  inv_fun := Œª f, f,
  left_inv := Œª f, by { ext, refl },
  right_inv := Œª f, by { ext, refl } }

/-- A continuous function on a compact space is automatically a continuous function vanishing at
infitnity. This is not an instance to avoid type class loops. -/
def zero_at_infty_continuous_map_class.of_compact {G : Type*} [continuous_map_class G Œ± Œ≤]
  [compact_space Œ±] : zero_at_infty_continuous_map_class G Œ± Œ≤ :=
{ coe := Œª g, g,
  coe_injective' := Œª f g h, fun_like.coe_fn_eq.mp h,
  map_continuous := map_continuous,
  zero_at_infty := by simp }

end basics

section metric

variables [metric_space Œ≤] [has_zero Œ≤] [zero_at_infty_continuous_map_class F Œ± Œ≤]

protected lemma bounded (f : F) : ‚àÉ C, ‚àÄ x y : Œ±, dist ((f : Œ± ‚Üí Œ≤) x) (f y) ‚â§ C :=
begin
  obtain ‚ü®K : set Œ±, hK‚ÇÅ, hK‚ÇÇ‚ü© := mem_cocompact.mp (tendsto_def.mp (zero_at_infty (f : F)) _
    (metric.closed_ball_mem_nhds (0 : Œ≤) zero_lt_one)),
  obtain ‚ü®C, hC‚ü© := (hK‚ÇÅ.image (map_continuous f)).bounded.subset_ball (0 : Œ≤),
  refine ‚ü®max C 1 + max C 1, (Œª x y, _)‚ü©,
  have : ‚àÄ x, f x ‚àà metric.closed_ball (0 : Œ≤) (max C 1),
  { intro x,
    by_cases hx : x ‚àà K,
    { exact (metric.mem_closed_ball.mp $ hC ‚ü®x, hx, rfl‚ü©).trans (le_max_left _ _) },
    { exact (metric.mem_closed_ball.mp $ set.mem_preimage.mp (hK‚ÇÇ hx)).trans (le_max_right _ _) } },
  exact  (dist_triangle (f x) 0 (f y)).trans
    (add_le_add (metric.mem_closed_ball.mp $ this x) (metric.mem_closed_ball'.mp $ this y)),
end

@[priority 100]
instance : bounded_continuous_map_class F Œ± Œ≤ :=
{ coe := Œª f, f,
  coe_injective' := Œª f g h, fun_like.coe_fn_eq.mp h,
  map_continuous := Œª f, map_continuous f,
  map_bounded := Œª f, zero_at_infty_continuous_map.bounded f }

end metric

section algebraic_structure

variables [topological_space Œ≤] (x : Œ±)

instance [has_zero Œ≤] : has_zero (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ zero := { to_continuous_map := 0, zero_at_infty' := tendsto_const_nhds } }

instance [has_zero Œ≤] : inhabited (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ default := 0 }

@[simp] lemma coe_zero [has_zero Œ≤] : ‚áë(0 : Œ± ‚ÜíC‚ÇÄ Œ≤) = 0 := rfl
lemma zero_apply [has_zero Œ≤] : (0 : Œ± ‚ÜíC‚ÇÄ Œ≤) x = 0 := rfl

instance [mul_zero_class Œ≤] [has_continuous_mul Œ≤] : has_mul (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ mul := Œª f g,
  { to_continuous_map := f * g,
    zero_at_infty' := by simpa only [mul_zero] using ((zero_at_infty f).mul (zero_at_infty g) :
      tendsto (Œª x : Œ±, f x * g x) (cocompact Œ±) (ùìù (0 * 0))) } }

@[simp] lemma coe_mul [mul_zero_class Œ≤] [has_continuous_mul Œ≤] (f g : Œ± ‚ÜíC‚ÇÄ Œ≤) :
  ‚áë(f * g) = f * g := rfl
lemma mul_apply [mul_zero_class Œ≤] [has_continuous_mul Œ≤] (f g : Œ± ‚ÜíC‚ÇÄ Œ≤) :
  (f * g) x = f x * g x := rfl

instance [mul_zero_class Œ≤] [has_continuous_mul Œ≤] : mul_zero_class (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.mul_zero_class _ coe_zero coe_mul

instance [semigroup_with_zero Œ≤] [has_continuous_mul Œ≤] : semigroup_with_zero (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.semigroup_with_zero _ coe_zero coe_mul

instance [add_zero_class Œ≤] [has_continuous_add Œ≤] : has_add (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ add := Œª f g,
  { to_continuous_map := f + g,
    zero_at_infty' := by simpa only [add_zero] using ((zero_at_infty f).add (zero_at_infty g) :
      tendsto (Œª x : Œ±, f x + g x) (cocompact Œ±) (ùìù (0 + 0))) } }

@[simp] lemma coe_add [add_zero_class Œ≤] [has_continuous_add Œ≤] (f g : Œ± ‚ÜíC‚ÇÄ Œ≤) :
  ‚áë(f + g) = f + g := rfl
lemma add_apply [add_zero_class Œ≤] [has_continuous_add Œ≤] (f g : Œ± ‚ÜíC‚ÇÄ Œ≤) :
  (f + g) x = f x + g x := rfl

instance [add_zero_class Œ≤] [has_continuous_add Œ≤] : add_zero_class (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.add_zero_class _ coe_zero coe_add

section add_monoid

variables [add_monoid Œ≤] [has_continuous_add Œ≤] (f g : Œ± ‚ÜíC‚ÇÄ Œ≤)

@[simp] lemma coe_nsmul_rec : ‚àÄ n, ‚áë(nsmul_rec n f) = n ‚Ä¢ f
| 0 := by rw [nsmul_rec, zero_smul, coe_zero]
| (n + 1) := by rw [nsmul_rec, succ_nsmul, coe_add, coe_nsmul_rec]

instance has_nat_scalar : has_scalar ‚Ñï (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ smul := Œª n f,
  { to_continuous_map := n ‚Ä¢ f.to_continuous_map,
    zero_at_infty' := by simpa [coe_nsmul_rec] using (nsmul_rec n f).zero_at_infty' } }

@[simp] lemma coe_nsmul (r : ‚Ñï) (f : Œ± ‚ÜíC‚ÇÄ Œ≤) : ‚áë(r ‚Ä¢ f) = r ‚Ä¢ f := rfl
@[simp] lemma nsmul_apply (r : ‚Ñï) (f : Œ± ‚ÜíC‚ÇÄ Œ≤) (v : Œ±) : (r ‚Ä¢ f) v = r ‚Ä¢ f v := rfl

instance : add_monoid (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.add_monoid _ coe_zero coe_add (Œª _ _, coe_nsmul _ _)

end add_monoid

instance [add_comm_monoid Œ≤] [has_continuous_add Œ≤] : add_comm_monoid (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.add_comm_monoid _ coe_zero coe_add (Œª _ _, coe_nsmul _ _)

section add_group

variables [add_group Œ≤] [topological_add_group Œ≤] (f g : Œ± ‚ÜíC‚ÇÄ Œ≤)

instance : has_neg (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ neg := Œª f,
  { to_continuous_map := -f,
    zero_at_infty' := by simpa only [neg_zero] using
      (zero_at_infty f : tendsto f (cocompact Œ±) (ùìù 0)).neg } }

@[simp] lemma coe_neg : ‚áë(-f) = -f := rfl
lemma neg_apply : (-f) x = -f x := rfl

instance : has_sub (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ sub := Œª f g,
  { to_continuous_map := f - g,
    zero_at_infty' :=
    begin
      rw sub_eq_add_neg,
      simpa only [add_zero] using ((zero_at_infty f).add (zero_at_infty (-g)) :
        tendsto (Œª x, f x + (-g) x) (cocompact Œ±) (ùìù (0 + 0))),
    end } }

@[simp] lemma coe_sub : ‚áë(f - g) = f - g := rfl
lemma sub_apply : (f - g) x = f x - g x := rfl

@[simp] lemma coe_zsmul_rec : ‚àÄ z, ‚áë(zsmul_rec z f) = z ‚Ä¢ f
| (int.of_nat n) := by rw [zsmul_rec, int.of_nat_eq_coe, coe_nsmul_rec, coe_nat_zsmul]
| -[1+ n] := by rw [zsmul_rec, zsmul_neg_succ_of_nat, coe_neg, coe_nsmul_rec]

instance has_int_scalar : has_scalar ‚Ñ§ (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ smul := Œª n f,
  { to_continuous_map := n ‚Ä¢ f,
    zero_at_infty' := by simpa using (zsmul_rec n f).zero_at_infty' } }

@[simp] lemma coe_zsmul (r : ‚Ñ§) (f : Œ± ‚ÜíC‚ÇÄ Œ≤) :
  ‚áë(r ‚Ä¢ f) = r ‚Ä¢ f := rfl
@[simp] lemma zsmul_apply (r : ‚Ñ§) (f : Œ± ‚ÜíC‚ÇÄ Œ≤) (v : Œ±) :
  (r ‚Ä¢ f) v = r ‚Ä¢ f v := rfl

instance [add_group Œ≤] [topological_add_group Œ≤] : add_group (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.add_group _ coe_zero coe_add coe_neg coe_sub (Œª _ _, coe_nsmul _ _)
  (Œª _ _, coe_zsmul _ _)

end add_group

instance [add_comm_group Œ≤] [topological_add_group Œ≤] : add_comm_group (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.add_comm_group _ coe_zero coe_add coe_neg coe_sub (Œª _ _, coe_nsmul _ _)
  (Œª _ _, coe_zsmul _ _)

instance [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] : has_scalar R (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
{ smul := Œª r f,
  { to_continuous_map := r ‚Ä¢ f,
    zero_at_infty' := by simpa [smul_zero] using
      (zero_at_infty f : tendsto f (cocompact Œ±) (ùìù 0)).const_smul r } }

@[simp] lemma coe_smul [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] (r : R) (f : Œ± ‚ÜíC‚ÇÄ Œ≤) : ‚áë(r ‚Ä¢ f) = r ‚Ä¢ f := rfl

lemma smul_apply [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] (r : R) (f : Œ± ‚ÜíC‚ÇÄ Œ≤) (x : Œ±) : (r ‚Ä¢ f) x = r ‚Ä¢ f x := rfl

instance [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] : smul_with_zero R (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
function.injective.smul_with_zero ‚ü®_, coe_zero‚ü© fun_like.coe_injective coe_smul

instance [has_zero Œ≤] {R : Type*} [monoid_with_zero R] [mul_action_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] : mul_action_with_zero R (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
function.injective.mul_action_with_zero ‚ü®_, coe_zero‚ü© fun_like.coe_injective coe_smul

instance [add_comm_monoid Œ≤] [has_continuous_add Œ≤] {R : Type*} [comm_semiring R] [module R Œ≤]
  [has_continuous_const_smul R Œ≤] : module R (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
function.injective.module R ‚ü®_, coe_zero, coe_add‚ü© fun_like.coe_injective coe_smul

instance [non_unital_semiring Œ≤] [has_continuous_add Œ≤] [has_continuous_mul Œ≤] :
  non_unital_semiring (Œ± ‚ÜíC‚ÇÄ Œ≤) :=
fun_like.coe_injective.non_unital_semiring _ coe_zero coe_add coe_mul (Œª _ _, coe_nsmul _ _)

end algebraic_structure

end zero_at_infty_continuous_map
