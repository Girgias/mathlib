/-
Copyright (c) 2022 Jiale Miao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiale Miao, Kevin Buzzard
-/

import tactic.basic
import algebra.big_operators.basic
import analysis.inner_product_space.basic
import analysis.inner_product_space.projection
import analysis.normed_space.is_R_or_C

/-!
# Gram-Schmidt Orthogonalization and Orthonormalization

In this file we introduce Gram-Schmidt Orthogonalization and Orthonormalization.

## Main results

- `gram_schmidt_process` : Gram-Schmidt process
- `gram_schmidt_process_orthogonal` :
  the proof that "gram_schmidt_process" produces an orthogonal system of vectors
- `gram_schmidt_process_normed` :
  Normalized "Gram-Schmidt" (i.e each vector in this system has unit length)
- `gram_schmidt_process_orthornormal` :
  the proof that "gram_schmidt_process_normed" produces an orthornormal system of vectors
-/

open_locale big_operators

variables (ùïú : Type*) (E : Type*) [is_R_or_C ùïú] [inner_product_space ùïú E]

/-- Gram-Schmidt process -/
noncomputable def gram_schmidt_process (f : ‚Ñï ‚Üí E) : ‚Ñï ‚Üí E
| n := f n - ‚àë i : fin n, have ‚Üëi < n := i.prop,
  orthogonal_projection (ùïú ‚àô gram_schmidt_process i) (f n)

/-- 'gram_schmidt_process_def' turns the sum over `fin n` into a sum over `‚Ñï`. -/
lemma gram_schmidt_process_def (f : ‚Ñï ‚Üí E) (n : ‚Ñï) :
  gram_schmidt_process ùïú E f n = f n - ‚àë i in finset.range n,
    orthogonal_projection (ùïú ‚àô gram_schmidt_process ùïú E f i) (f n) :=
begin
  rw gram_schmidt_process,
  congr' 1,
  exact fin.sum_univ_eq_sum_range (Œª i,
    (orthogonal_projection (ùïú ‚àô gram_schmidt_process ùïú E f i) (f n) : E)) n,
end

/-- **Gram-Schmidt Orthogonalisation**
Gram-Schmidt process produces an orthogonal system of vectors. -/
theorem gram_schmidt_process_orthogonal (f : ‚Ñï ‚Üí E) (a b : ‚Ñï) (h‚ÇÄ : a < b) :
  (inner (gram_schmidt_process ùïú E f a) (gram_schmidt_process ùïú E f b) : ùïú) = 0 :=
begin
  have hc : ‚àÉ c, b ‚â§ c := ‚ü®b+1, by linarith‚ü©,
  cases hc with c h‚ÇÅ,
  induction c with c hc generalizing a b,
  { simp at h‚ÇÅ,
    simp [h‚ÇÅ] at h‚ÇÄ,
    contradiction },
  { rw nat.le_add_one_iff at h‚ÇÅ,
    cases h‚ÇÅ with hb‚ÇÅ hb‚ÇÇ,
    { exact hc _ _ h‚ÇÄ hb‚ÇÅ },
    { simp only [gram_schmidt_process_def ùïú E f (c + 1), hb‚ÇÇ, inner_sub_right, inner_sum],
      have h‚ÇÇ : ‚àÄ x ‚àà finset.range(c + 1), x ‚â† a ‚Üí
      (inner (gram_schmidt_process ùïú E f a)
        (orthogonal_projection (ùïú ‚àô (gram_schmidt_process ùïú E f x)) (f (c + 1)) : E) : ùïú) = 0,
      { intros x hx‚ÇÅ hx‚ÇÇ,
        simp only [orthogonal_projection_singleton],
        rw inner_smul_right,
        cases hx‚ÇÇ.lt_or_lt with hxa‚ÇÅ hxa‚ÇÇ,
        { have ha‚ÇÇ : a ‚â§ c,
          { rw hb‚ÇÇ at h‚ÇÄ,
            exact nat.lt_succ_iff.mp h‚ÇÄ },
          specialize hc x a,
          simp [hxa‚ÇÅ, ha‚ÇÇ] at hc,
          simp only [mul_eq_zero, div_eq_zero_iff, inner_self_eq_zero],
          right,
          rwa inner_eq_zero_sym at hc },
        { rw [finset.mem_range, nat.lt_succ_iff] at hx‚ÇÅ,
          specialize hc a x,
          simp [hxa‚ÇÇ, hx‚ÇÅ] at hc,
          simp only [mul_eq_zero, div_eq_zero_iff, inner_self_eq_zero],
          right,
          exact hc }},
      rw hb‚ÇÇ at h‚ÇÄ,
      have ha‚ÇÇ : a ‚àà finset.range(c + 1) := finset.mem_range.mpr h‚ÇÄ,
      rw finset.sum_eq_single_of_mem a ha‚ÇÇ h‚ÇÇ,
      simp only [orthogonal_projection_singleton],
      rw inner_smul_right,
      by_cases (inner (gram_schmidt_process ùïú E f a) (gram_schmidt_process ùïú E f a) : ùïú) = 0,
      { simp only [inner_self_eq_zero] at h,
        repeat {rw h},
        simp only [inner_zero_left, mul_zero, sub_zero] },
      { rw ‚Üê inner_self_eq_norm_sq_to_K,
        simp [h] }}}
end

/-- Generalised Gram-Schmidt Orthorgonalization -/
theorem gram_schmidt_process_orthogonal' (f : ‚Ñï ‚Üí E) (a b : ‚Ñï) (h‚ÇÄ : a ‚â† b) :
  (inner (gram_schmidt_process ùïú E f a) (gram_schmidt_process ùïú E f b) : ùïú) = 0 :=
begin
  cases h‚ÇÄ.lt_or_lt with ha hb,
  { exact gram_schmidt_process_orthogonal ùïú E f a b ha },
  { rw inner_eq_zero_sym,
    exact gram_schmidt_process_orthogonal ùïú E f b a hb }
end

/-- Normalized Gram-Schmidt process
(i.e each vector in 'gram_schmidt_process_normed` has unit length) -/
noncomputable def gram_schmidt_process_normed (f : ‚Ñï ‚Üí E) (n : ‚Ñï) : E :=
(‚à• gram_schmidt_process ùïú E f n ‚à• : ùïú)‚Åª¬π ‚Ä¢ (gram_schmidt_process ùïú E f n)

lemma gram_schmidt_process_normed_unit_length (f : ‚Ñï ‚Üí E) (n : ‚Ñï)
  (h : gram_schmidt_process ùïú E f n ‚â† 0) :
    ‚à• gram_schmidt_process_normed ùïú E f n ‚à• = 1 :=
by simp only [gram_schmidt_process_normed, norm_smul_inv_norm h]

/-- **Gram-Schmidt Orthonormalization**
Normalized Gram-Schmidt process produces an orthornormal system of vectors. -/
theorem gram_schmidt_process_orthonormal (f : ‚Ñï ‚Üí E) (h‚ÇÄ : ‚àÄ n, gram_schmidt_process ùïú E f n ‚â† 0) :
  orthonormal ùïú (gram_schmidt_process_normed ùïú E f) :=
begin
  simp only [orthonormal],
  split,
  { simp [gram_schmidt_process_normed_unit_length, h‚ÇÄ] },
  { intros i j hij,
    simp [gram_schmidt_process_normed, inner_smul_left, inner_smul_right],
    repeat {right},
    exact gram_schmidt_process_orthogonal' ùïú E f i j hij }
end
